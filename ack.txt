1. 본 게임에 사용되는 Tank는 Vehicle Class 같은 타입의 클래스를 이용할 것임.
   이는 Character Class에 포함되어 있는 달리기나 점프 등의 복잡한 기능이 필요 없음.
   따라서, Pawn 이나 Actor Class를 base class로 삼는 것이 좋음.

2. Actor 클래스 아래 Pawn 클래스가 존재. Pawn 클래스가 컨트롤러를 받아 움직이므로,
   Pawn 클래스를 베이스 클래스로 삼았음.(부모 클래스를 Pawn 클래스로 하여 클래스 생성함.)

3. 프로젝트에서 사용할 커스텀 클래스가 많으므로, 클래스 생성시에 미리 경로를 만들어 넣어주자.
   ex) Name : PawnBase
       Path : ~/~/Pawns/PawnBase

4. Unreal 코드 에디터를 VS Code로 변경하기
   
   1. 우선 에디터에서 에디터 세팅 - 소스 코드 부분에서 VS Code로 변경.
   2. 언리얼 에디터 재시작후 Generate VS code - 열기
   3. VS Code에서 인텔리전스 버그가 발생하는데 이는 리포지토리에 있는 defines를
      .vscode에 있는 c_cpp_properties.json의 defines 부분과 교체.
   4. defines 맨 아래 있는 UE_PROJECT_NAME 에 프로젝트 이름을 적어 넣기.
   5. 아래 두 부분은 모두 대문자로 프로젝트 이름을 넣어줌. (_API의 경우 커스텀 클래스의 클래스 이름 앞에 붙어있는 이름과 같아야 함.)

5. include와 forward declaration의 차이.

   include : 다른 클래스 내에서 변수 및 핵심 기능과 같은 것들을 검색할 수 있도록 참조하는 클래스에 대한 액세스를 허용함.
              컴파일러에게 다른 클래스의 디테일한 부분 까지 접근할 수 있도록 함.
   forward declaration : 단지 해당 클래스가 참조에 대해 알게 함.(인식할 수 있게 함.)
                              컴파일러에게 해당 클래스를 참조하고 있다는 것을 단순히 알려줌.

6. Scene component
   액터의 월드 내 위치, 회전, 스케일을 정해주며, 그 아래 모든 컴포넌트에 계층구조식으로 적용됨.

7. UPROPERTY
   UPROPERTY - UCLASS 또는 USTRUCT 의 멤버 변수를 UPROPERTY 로 사용할 수 있도록 해줍니다. 
                     UPROPERTY 에는 여러가지 용도가 있습니다. 
                     변수가 리플리케이트, 시리얼라이즈 되도록 하거나, 블루프린트에서의 접근할 수 있도록 할 수도 있습니다.  
                     UObject 로의 레퍼런스가 몇 개나 되는지 가비지 컬렉터가 추적하는 데도 사용됩니다.


   <언리얼 포럼에서 찾은 글>
   "Any UObject pointer stored in a UPROPERTY or in a UE4 container class (such as TArray) is considered a "reference" for the purposes of garbage collection. "
   Make it a UPROPERTY to be safe.
   https://forums.unrealengine.com/development-discussion/c-gameplay-programming/1667209-please-help-me-understand-rootset-and-garbage-collection

   비 UPROPERTY 변수는 GC(가비지 컬렉터) 시스템에 의해 계산되지 않음. 알아서 정리해 주지 않음.

8. 에디터에서 더 사용하기 편하게 C++ 클래스를 기반으로한 블루 프린트 클래스를 만들어 사용할 수 있다.
   여기서는  PawnBase 라는 C++ 클래스를 만들고, 이를 기반으로 하여 PawnTank, PawnTurret 블루 프린트 클래스를 만들어 주었다.

9. UPROPERTY() 에서 meta = (AllowPrivateAccess = "true")를 통해, 컴파일러로 하여금 Visibility가 특정된 Blueprint에 Private Property들을 
   공개해줌.(expose)